{
    "project": {
        "name": "phidgets",
        "version": "0.5.8",
        "description": "A Node.js library enabling the use of various Phidgets interface boards.",
        "url": ""
    },
    "files": {
        "lib/phidgets.js": {
            "name": "lib/phidgets.js",
            "modules": {
                "phidgets": 1
            },
            "classes": {
                "Phidget": 1,
                "PhidgetInterfaceKit": 1,
                "PhidgetLED": 1,
                "PhidgetBridge": 1,
                "PhidgetStepper": 1,
                "PhidgetRFID": 1,
                "PhidgetTemperatureSensor": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "phidgets": {
            "name": "phidgets",
            "submodules": {},
            "elements": {},
            "classes": {
                "Phidget": 1,
                "PhidgetInterfaceKit": 1,
                "PhidgetLED": 1,
                "PhidgetBridge": 1,
                "PhidgetStepper": 1,
                "PhidgetRFID": 1,
                "PhidgetTemperatureSensor": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/phidgets.js",
            "line": 2696,
            "description": "The `Phidgets` library module makes it easy to connect to various sensor and controller\nboards made by [Phidgets Inc.](http://www.phidgets.com) This library works under\n[Node.js](http://www.nodejs.org) and other compatible frameworks such as\n[io.js](http://www.iojs.org)\n\nFor support, go to the GitHub [project page](https://github.com/evantahler/nodePhidgets).\n\nPlease note that this library is an open source project that is not affiliated with\nPhidgets Inc.",
            "todo": [
                "Add support for more Phidget boards"
            ]
        }
    },
    "classes": {
        "Phidget": {
            "name": "Phidget",
            "shortname": "Phidget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "phidgets",
            "namespace": "",
            "file": "lib/phidgets.js",
            "line": 29,
            "description": "The `Phidget` class is an abstract class providing common properties and methods to all\nthe board-specific child classes. This class cannot be instantiated directly. Please\ninstantiate one of the child classes instead:\n\n   * {{#crossLink \"PhidgetInterfaceKit\"}}{{/crossLink}}\n   * {{#crossLink \"PhidgetLED\"}}{{/crossLink}}\n   * {{#crossLink \"PhidgetBridge\"}}{{/crossLink}}\n   * {{#crossLink \"PhidgetStepper\"}}{{/crossLink}}\n   * {{#crossLink \"PhidgetTemperatureSensor\"}}{{/crossLink}}\n\nThis object extends Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for inherited methods.",
            "extends": "events.EventEmitter",
            "is_constructor": 1,
            "throws": {
                "description": "Unsupported device type.",
                "type": "Error"
            }
        },
        "PhidgetInterfaceKit": {
            "name": "PhidgetInterfaceKit",
            "shortname": "PhidgetInterfaceKit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "phidgets",
            "namespace": "",
            "file": "lib/phidgets.js",
            "line": 869,
            "description": "The `PhidgetInterfaceKit` class allows you to control and receive data from all Phidget\ninterface kit boards :\n\n * PhidgetInterfaceKit 8/8/8 normal and mini-format\n * PhidgetInterfaceKit 2/2/2\n * PhidgetInterfaceKit 0/16/16\n * PhidgetInterfaceKit 8/8/8 (with and without hub)\n * etc.\n\nNot all of these boards have been tested. If you possess one and can verify its\ncompatibility, let us know.\n\nThis object extends the `Phidget` object which extends Node.js' [`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for inherited methods.",
            "is_constructor": 1,
            "extends": "Phidget"
        },
        "PhidgetLED": {
            "name": "PhidgetLED",
            "shortname": "PhidgetLED",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "phidgets",
            "namespace": "",
            "file": "lib/phidgets.js",
            "line": 1194,
            "description": "The PhidgetLED class allows you to control a PhidgetLED-64 Advanced board.\n\nThis object extends the `Phidget` object which itself extends Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for inherited methods.",
            "is_constructor": 1,
            "extends": "Phidget"
        },
        "PhidgetBridge": {
            "name": "PhidgetBridge",
            "shortname": "PhidgetBridge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "phidgets",
            "namespace": "",
            "file": "lib/phidgets.js",
            "line": 1414,
            "description": "The `PhidgetBridge` class allows you to receive data from PhidgetBridge boards. Beware\nthat each input's enabled/disabled status remains even when the device is powered off.\nAs a precaution, you can call `setEnabled()` each time your code starts:\n\n      phidgets = require('phidgets'),\n      bridge = new phidgets.PhidgetBridge();\n\n      function onSensorData(emitter, data) {\n         console.log(data);\n      }\n\n      bridge.on(\"opened\", function() {\n         bridge.setEnabled(0, true);\n         bridge.on('sensor', onSensorData);\n      });\n\n      bridge.open();\n\nThis object extends the `Phidget` object which extends Node.js' [`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for inherited methods.",
            "is_constructor": 1,
            "extends": "Phidget"
        },
        "PhidgetStepper": {
            "name": "PhidgetStepper",
            "shortname": "PhidgetStepper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "phidgets",
            "namespace": "",
            "file": "lib/phidgets.js",
            "line": 1655,
            "description": "The `PhidgetStepper` class is used to control the stepper motors connected to a\nPhidgetStepper board. It can be used to set a target position for the motors while\ncontrolling their maximum velocity and acceleration.\n\nHere is a simple example that moves the motor connected to output 0 to its 200 position\nand then brings it back to position 0. Before making it move, you must first \"engage\"\nthe motor. Also, you should always explicitely set the desired acceleration and\nvelocity (speed).\n\n    var phidgets = require('phidgets');\n    var ps = new phidgets.PhidgetStepper();\n\n    ps.addListener(\"opened\", onReady);\n\n    function onReady() {\n\n       // Engage motor and set desired properties\n       ps.engageMotor(0, true);\n       ps.setAcceleration(0, ps.maximumAcceleration);\n       ps.setTargetVelocity(0, ps.maximumVelocity);\n\n       // Makes the motor move\n       ps.setTargetPosition(0, 200);\n\n       // Triggered when the target position is reached\n       ps.once(\"target\", function(e, data) {\n         ps.setTargetPosition(0, 0);\n       });\n\n    }\n\n    ps.open();\n\nThe `PhidgetStepper` object adds 5 events to the basic ones inherited by all Phidgets.\nThey are:\n\n * `position`: triggered each time the motor's position changes\n * `start`: triggered when a motor starts moving\n * `stop`: triggered when a motor stops moving\n * `target`: triggered when the motor has reached its target position\n * `input`: triggered when a digital input changes (not available on all boards)\n\nThis object extends the `Phidget` object which itself extends Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for more inherited methods and properties.",
            "is_constructor": 1,
            "extends": "Phidget"
        },
        "PhidgetRFID": {
            "name": "PhidgetRFID",
            "shortname": "PhidgetRFID",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "phidgets",
            "namespace": "",
            "file": "lib/phidgets.js",
            "line": 2350,
            "description": "The `PhidgetRFID` class allows you to use a PhidgetRFID board to read and write (if the board\nsupports if) RFID tags. The PhidgetRFID board supports 3 protocols:\n\n - EM4100/EM4102 40-bit\n - ISO11785 FDX-B encoding, Animal ID\n - PhidgetsTAG Protocol 24 character ASCII\n\nPlease note that the antenna must be activated for the `PhidgetRFID` to report tag reads. Here's\nan example of how to use this object to read from a tag:\n\n    var phidgets = require(\"Phidgets\");\n\n    var pRFID = new phidgets.PhidgetRFID()\n        .on('opened', function(emitter, data) {\n            emitter.antenna = true;\n            console.log(\"Device ready. Antenna activated.\");\n        })\n        .open();\n\nThis object extends the `Phidget` object which itself extends Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for inherited methods.",
            "is_constructor": 1,
            "extends": "Phidget"
        },
        "PhidgetTemperatureSensor": {
            "name": "PhidgetTemperatureSensor",
            "shortname": "PhidgetTemperatureSensor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "phidgets",
            "namespace": "",
            "file": "lib/phidgets.js",
            "line": 2696,
            "description": "The `PhidgetTemperatureSensor` class allows you receive data from PhidgetTemperatureSensor\nboards.\n\nAs of this writing, this class has only been tested with a\n[1048_0 - PhidgetTemperatureSensor 4-input](http://www.phidgets.com/products.php?product_id=1048),\nbut should be compatible with any PhidgetTemperatureSensor board.\n\n```JavaScript\nvar PhidgetTemperatureSensor = require('phidgets').PhidgetTemperatureSensor;\n\nvar pts = new PhidgetTemperatureSensor();\n\nfunction onReady() {\n\n   var inputIndex = 0;\n   \n   // set the ThermocoupleType to K\n   pts.setThermocoupleType(inputIndex, PhidgetTemperatureSensor.THERMOCOUPLE_TYPES.TYPE_K);\n\n   // receive temperature events when the temperature changes by at least 2 degrees Celsius\n   // (default is 0.5)\n   pts.setTemperatureChangeTrigger(inputIndex, 2);\n   \n   pts.on('temperature', function (emitter, data) {\n     if (data.index === inputIndex) {\n       console.log('Temperature: ' + data.value);\n     }\n   });\n\n}\n\npts.addListener('opened', onReady);\n\npts.open();\n```\n\nThis object extends the `Phidget` object which itself extends Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for more inherited methods and properties.",
            "is_constructor": 1,
            "extends": "Phidget",
            "author": "Andrew Berger <andrew@andrewberger.net>"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/phidgets.js",
            "line": 8,
            "class": "Phidget"
        },
        {
            "file": "lib/phidgets.js",
            "line": 9,
            "class": "Phidget"
        },
        {
            "file": "lib/phidgets.js",
            "line": 10,
            "class": "Phidget"
        },
        {
            "file": "lib/phidgets.js",
            "line": 58,
            "description": "[read-only] Array of all the devices supported by this library.",
            "itemtype": "property",
            "name": "supportedDevices",
            "type": "{string[]}",
            "readonly": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 81,
            "description": "[read-only] The type of device (i.e. PhidgetInterfaceKit, PhidgetLED, etc.).",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "readonly": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 94,
            "description": "[read-only]  Whether the device is ready for use or not. A device must be 'opened'\nbefore it can be used.",
            "itemtype": "property",
            "name": "ready",
            "type": "{Boolean}",
            "readonly": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 109,
            "description": "Whether to try to automatically reopen the device if it gets remotely closed.",
            "itemtype": "property",
            "name": "reopen",
            "type": "{Boolean}",
            "default": "true",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 117,
            "description": "The host name or address of the Phidgets WebService to connect to.",
            "itemtype": "property",
            "name": "host",
            "type": "{String}",
            "default": "127.0.0.1",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 125,
            "description": "The port of the Phidgets webservice to connect to.",
            "itemtype": "property",
            "name": "port",
            "type": "{int}",
            "default": "5001",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 133,
            "description": "The unique serial number of the device. If specified, it will be used to connect to\nthe matching device.",
            "itemtype": "property",
            "name": "serial",
            "type": "{int}",
            "default": "undefined",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 143,
            "description": "The unique label of the device. The label must have a maximum length of 10\ncharacters. If you try to set a longer label, the remainder will be truncated. Labels\nare supported only on newer devices and are remembered even when the device is\nunplugged. A label can only be set after a Phidget has been 'opened'. Trying to set\nthe label before that will fail silently.",
            "itemtype": "property",
            "name": "label",
            "type": "{String}",
            "default": "undefined",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 167,
            "description": "[read-only] The unique ID of the Phidget WebService the device is currently connected\nto.",
            "itemtype": "property",
            "name": "serverId",
            "type": "{int}",
            "default": "undefined",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 182,
            "description": "The password to connect to the WebService. If specified, it will be used when opening\na new connection. As soon as connected the password property will be erased. THIS IS\nCURRENTLY SET TO PRIVATE BECAUSE IT'S NOT IMPLEMENTED YET!",
            "itemtype": "property",
            "name": "password",
            "type": "{String}",
            "default": "undefined",
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 194,
            "description": "[read-only] Human-readable version of the board's name (i.e. \"Phidget InterfaceKit\n8/8/8\". This information is only available some time after the connection has been\nsuccessfully opened.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "undefined",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 210,
            "description": "[read-only] This number distinguishes between revisions of a specific type of\nPhidget. It is only useful for debugging purposes. This information is only available\nsome time after the connection has been successfully opened.",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "default": "undefined",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 226,
            "description": "The delay (in milliseconds) between report updates sent from the webservice.",
            "itemtype": "property",
            "name": "interReportPeriod",
            "type": "{int}",
            "default": "8",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 262,
            "description": "This is an alias for the `on()` method.",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "event",
                    "description": "The event to add the listener for.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The callback function to execute when the event is\ntriggered.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 271,
            "description": "Adds a listener to the end of the listeners array for the specified event. No checks\nare made to see if the listener has already been added. Multiple calls passing the same\ncombination of event and listener will result in the listener being added multiple\ntimes.\n\nThis method is inherited from Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for more details methods.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "The event to add the listener for.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The callback function to execute when the event is\ntriggered.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 288,
            "description": "Adds a one time listener for the event. This listener is invoked only the next time the\nevent is fired, after which it is removed.\n\nThis method is inherited from Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for more details methods.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "event",
                    "description": "The event to add the listener for.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The callback function to execute when the event is\ntriggered.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 303,
            "description": "Removes all listeners, or those of the specified event.\n\nThis method is inherited from Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for more details methods.",
            "itemtype": "method",
            "name": "removeAllListeners",
            "params": [
                {
                    "name": "event",
                    "description": "The event to remove the listeners for.",
                    "type": "String",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 315,
            "description": "Removes a listener from the listener array for the specified event. `removeListener()`\nwill remove, at most, one instance of a listener from the listener array. If any single\nlistener has been added multiple times to the listener array for the specified event,\nthen `removeListener()` must be called multiple times to remove each instance.\n\nThis method is inherited from Node.js'\n[`events.EventEmitter` object](https://nodejs.org/api/events.html#events_class_events_eventemitter).\nSee that object's documentation for more details methods.",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "event",
                    "description": "The event to remove the listeners for.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "listener",
                    "description": "The callback function to execute when the event is\ntriggered.",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 333,
            "description": "Opens a connection to a Phidget device. Opening a connection is a two-step process.\nFirst, a connection to the Phidget WebService (which must be running) is established.\nThen, a session to the specified device (which must be plugged in) is opened.",
            "itemtype": "method",
            "name": "open",
            "params": [
                {
                    "name": "options",
                    "description": "Options",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}",
                    "props": [
                        {
                            "name": "host",
                            "description": "Hostname or IP address to connect to",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"127.0.0.1\""
                        },
                        {
                            "name": "port",
                            "description": "Port to connect to",
                            "type": "Int",
                            "optional": true,
                            "optdefault": "5001"
                        },
                        {
                            "name": "serial",
                            "description": "Serial number of the device to connect to",
                            "type": "Int",
                            "optional": true
                        },
                        {
                            "name": "label",
                            "description": "Label of the device to connect to (can be set in the\n       Phidgets control panel).",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Returns the Phidget to allow method chaining.",
                "type": "Phidget"
            },
            "chainable": 1,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 359,
            "description": "Event emitted when an attempt to open a Phidget has been initiated.",
            "itemtype": "event",
            "name": "opening",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual Phidget object that emitted the event.",
                    "type": "Phidget"
                }
            ],
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 396,
            "description": "Closes a previously opened connection to a Phidget device.",
            "itemtype": "method",
            "name": "close",
            "return": {
                "description": "Returns the Phidget to allow method chaining.",
                "type": "Phidget"
            },
            "chainable": 1,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 426,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 435,
            "description": "Event emitted when the connection to a phidget has been remotely closed.",
            "itemtype": "event",
            "name": "closed",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual object that emitted the event.",
                    "type": "Phidget"
                }
            ],
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 445,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 461,
            "description": "Event emitted when an attempt to automatically re-open a closed Phidget is\nbeing carried on.",
            "itemtype": "event",
            "name": "reopening",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual Phidget object that emitted the event.",
                    "type": "Phidget"
                },
                {
                    "name": "data",
                    "description": "Additional data regarding the event.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "attempt",
                            "description": "The number of re-opening attempts performed.",
                            "type": "Int"
                        },
                        {
                            "name": "max",
                            "description": "The maximum number of attempts that will be tried before\nfailing.",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 488,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 493,
            "description": "Event emitted when an error occurs while trying to open a phidget",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual object that emitted the event.",
                    "type": "Phidget"
                },
                {
                    "name": "error",
                    "description": "The error object",
                    "type": "Error",
                    "props": [
                        {
                            "name": "address",
                            "description": "The network address",
                            "type": "String"
                        },
                        {
                            "name": "code",
                            "description": "The error code",
                            "type": "String"
                        },
                        {
                            "name": "errno",
                            "description": "The error number",
                            "type": "String"
                        },
                        {
                            "name": "message",
                            "description": "The error message",
                            "type": "String"
                        },
                        {
                            "name": "port",
                            "description": "The network port",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 511,
            "description": "This function is called each time data is received from the Phidget WebSerice. It adds\nthe data to the input buffer and checks if full lines (separated by '\\n') can be\nreconstructed. If full lines are found they are handed over to the `_parseLineInput()`\nmethod for processing.",
            "itemtype": "method",
            "name": "_handleData",
            "params": [
                {
                    "name": "chunk",
                    "description": "A chunk of utf8 encoded text to parse",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 535,
            "description": "Event emitted when a new line of data has been received from the web service. This\nis mostly useful for debugging purposes (hence the @private denomination). It will\nlet you view all data coming in.",
            "itemtype": "event",
            "name": "received",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual Phidget object that emitted the event.",
                    "type": "Phidget"
                },
                {
                    "name": "data",
                    "description": "The actual string data received.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 553,
            "description": "Parses a single line of data typically received from the Phidget WebService. If the\nline is a *report* line, the function hands it off to the `_parsePskKey()` method.\nOtherwise, it deals with it locally.",
            "itemtype": "method",
            "name": "_parseLineInput",
            "params": [
                {
                    "name": "line",
                    "description": "A non-terminated line of utf8 text",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 585,
            "description": "Event emitted when a phidget is successfully opened.",
            "itemtype": "event",
            "name": "opened",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual Phidget object that emitted the event.",
                    "type": "Phidget"
                }
            ],
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 638,
            "description": "Event emitted when an attempt to open a Phidget times out.",
            "itemtype": "event",
            "name": "timeout",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual Phidget object that emitted the event.",
                    "type": "Phidget"
                }
            ],
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 685,
            "description": "Parses a /PSK string and performs appropriate action.",
            "params": [
                {
                    "name": "oPsk",
                    "description": "Original /PSK string typically coming from the Phidget WebService",
                    "type": "String"
                },
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 761,
            "description": "Parses Phidget-specific data received from the Phidget WebService. This function is\nmeant to be overridden by subclasses.",
            "itemtype": "method",
            "name": "_parsePhidgetSpecificData",
            "params": [
                {
                    "name": "data",
                    "description": "An object containing the received data",
                    "type": "Object",
                    "props": [
                        {
                            "name": "device",
                            "description": "The device identifier (e.g. PhidgetInterfaceKey,\n       PhidgetLED, etc.).",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "The custom label set for the device.",
                            "type": "String"
                        },
                        {
                            "name": "serial",
                            "description": "The serial number of the device.",
                            "type": "Int"
                        },
                        {
                            "name": "keyword",
                            "description": "A keyword identifying the type of information conveyed. It\n       could be 'Input', 'Version', 'DataRate', etc.",
                            "type": "String"
                        },
                        {
                            "name": "index",
                            "description": "The numerical index (for indexed keys only)",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The actual value.",
                            "type": "String"
                        },
                        {
                            "name": "status",
                            "description": "The status of the key. It could be: 'added', 'changed',\n       'removing', etc.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 781,
            "description": "Sets phidget-specific state before the 'opened' event is triggered. This is a good\nplace for subclasses to assign initial values to the board. This is meant to be\noverridden by subclasses.",
            "itemtype": "method",
            "name": "_setPhidgetSpecificInitialState",
            "access": "protected",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 791,
            "description": "Returns a /PCK string built from the specified parameters. PCK strings are the keys\nsent out to control the board.",
            "itemtype": "method",
            "name": "_makePckString",
            "params": [
                {
                    "name": "keyword",
                    "description": "The operation keyword to use",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "The index of the output to use",
                    "type": "Int",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 807,
            "description": "Sends the /PCK string (with attached value) to the webservice.",
            "itemtype": "method",
            "name": "_sendPck",
            "params": [
                {
                    "name": "key",
                    "description": "A /PCK string (typically form the _makePckString() method)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Int|string"
                },
                {
                    "name": "persistent",
                    "description": "Whether the value should persist or whether its for\n       the session only.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 824,
            "description": "Sends a line of data to the webservice",
            "itemtype": "method",
            "name": "_sendLine",
            "params": [
                {
                    "name": "line",
                    "description": "A non-terminated line of data to send",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 835,
            "description": "Event emitted when a new line of data has been sent to the Phidget WebService. This\nis mostly useful for debugging purposes (hence the @private denomination). It will\nlet you view all data going out.",
            "itemtype": "event",
            "name": "sent",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual Phidget object that emitted the event.",
                    "type": "Phidget"
                },
                {
                    "name": "data",
                    "description": "The actual string of sent data.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 848,
            "description": "Returns the value after making sure it falls between min and max.",
            "itemtype": "method",
            "name": "_forceBetween",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check",
                    "type": "Int|Number"
                },
                {
                    "name": "min",
                    "description": "The minimum value desired",
                    "type": "Int"
                },
                {
                    "name": "max",
                    "description": "The maximum value desired",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "int"
            },
            "access": "protected",
            "tagname": "",
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 865,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 866,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 867,
            "class": "Phidget",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 894,
            "description": "[read-only] An object containing information about the digital inputs of the device.\nHere are a few examples of how to retrieve information in that object:\n\n    PhidgetInterfaceKit.inputs[5].value         // Input 5 current value\n    PhidgetInterfaceKit.inputs.count            // Total number of inputs on the device",
            "itemtype": "property",
            "name": "inputs",
            "type": "Object",
            "class": "PhidgetInterfaceKit",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The total number of inputs on the device.",
                    "type": "Int"
                },
                {
                    "name": "inputs[int].value",
                    "description": "The current value of the specified input.",
                    "type": "Int"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 907,
            "description": "[read-only] An object containing information about the analog sensor inputs of the\ndevice. Here are a few examples of how to retrieve information in that object:\n\n    PhidgetInterfaceKit.sensors[5].value         // Sensor 5 current value\n    PhidgetInterfaceKit.sensors.count            // Total number of sensors on the device\n    PhidgetInterfaceKit.sensors[3].sensitivity   // Sensor 3 sensitivity level",
            "itemtype": "property",
            "name": "sensors",
            "type": "Object",
            "class": "PhidgetInterfaceKit",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The total number of sensors on the device.",
                    "type": "Int"
                },
                {
                    "name": "sensors[int].rawValue",
                    "description": "The current raw value of the specified sensor.",
                    "type": "Int"
                },
                {
                    "name": "sensors[int].sensitivity",
                    "description": "The sensitivity threshold of the specified\n          sensor.",
                    "type": "Int"
                },
                {
                    "name": "sensors[int].updateInterval",
                    "description": "The update interval of the specified\n          sensor.",
                    "type": "Int"
                },
                {
                    "name": "sensors[int].value",
                    "description": "The current value of the specified sensor.",
                    "type": "Int"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 926,
            "description": "[read-only] An object containing information about the digital outputs of the device.\nHere are a few examples of how to retrieve information in that object:\n\n    PhidgetInterfaceKit.outputs[5].value     // Output 5 current value\n    PhidgetInterfaceKit.outputs.count        // Total number of outputs on the device",
            "itemtype": "property",
            "name": "outputs",
            "type": "Object",
            "class": "PhidgetInterfaceKit",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The total number of outputs on the device.",
                    "type": "Int"
                },
                {
                    "name": "outputs[int].value",
                    "description": "The current value of the specified output.",
                    "type": "Int"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 939,
            "description": "Determines whether ratiometric values should be used or not for analog sensors. If\nthis property is defined before the phidget is opened, it will be set as soon as\npossible after opening it. If it is defined after the board is opened and ready, it\nwill be set right away.",
            "itemtype": "property",
            "name": "ratiometric",
            "type": "Boolean",
            "default": "undefined",
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 961,
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 971,
            "description": "Sets the specified output to active (true) or inactive (false). This method should only\nbe used after the board is 'opened'. Calling it before will fail silently.",
            "itemtype": "method",
            "name": "setOutput",
            "params": [
                {
                    "name": "index",
                    "description": "The output number to set (or array of output numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The value you wish to set the output to.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns the PhidgetInterfaceKit to allow method\n         chaining.",
                "type": "PhidgetInterfaceKit"
            },
            "chainable": 1,
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 997,
            "description": "Event emitted when an output's status is changed.",
            "itemtype": "event",
            "name": "output",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetInterfaceKit object that\n       emitted the event.",
                    "type": "PhidgetInterfaceKit"
                },
                {
                    "name": "data",
                    "description": "An object containing the output data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The output's index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The output's new value",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1019,
            "description": "Sets the update interval of a sensor. The update interval is the number of\nmilliseconds between update notifications. It must be a multiple of 8 between 8 and\n1000.\n\nThe shorter the interval is and the more frequent the updates will be. However, shorter\nintervals are more demanding on the cpu. This function accepts a single sensor number\nor an array of sensor numbers to set. This method should only be used after the board\nis 'opened'. Calling it before will fail silently.",
            "itemtype": "method",
            "name": "setUpdateInterval",
            "params": [
                {
                    "name": "index",
                    "description": "The sensor's number (or an array of sensor numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The number of milliseconds you wish to set the interval to.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "16"
                }
            ],
            "return": {
                "description": "Returns the PhidgetInterfaceKit to allow method\n         chaining.",
                "type": "PhidgetInterfaceKit"
            },
            "chainable": 1,
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1056,
            "description": "Sets the sensitivity threshold of a sensor. The threshold is measured in `sensorvalue`\n(0-1000). It is the smallest change that will trigger an update notification from the\nsensor. Sensitivity threshold and update intervals are mutually exclusive. If you set\nthe sensitivity of a sensor, the update interval will be ignored and vice versa.\n\nThis function accepts a single sensor number or an array of sensor numbers for which to\nset the sensitivity.\n\nThis method should only be used after the board is 'opened'. Calling it before will\nfail silently.",
            "itemtype": "method",
            "name": "setSensitivity",
            "params": [
                {
                    "name": "index",
                    "description": "The sensor's number (or an array of sensor numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The number sensitivity threshold to assign (0-1000)",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "10"
                }
            ],
            "return": {
                "description": "Returns the PhidgetInterfaceKit to allow method\n         chaining.",
                "type": "PhidgetInterfaceKit"
            },
            "chainable": 1,
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1102,
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1112,
            "description": "Event emitted when the status of a binary input changes.",
            "itemtype": "event",
            "name": "input",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetInterfaceKit object that\n       emitted the event.",
                    "type": "PhidgetInterfaceKit"
                },
                {
                    "name": "data",
                    "description": "An object containing the input data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The input's index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The input's received value",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1137,
            "description": "Event emitted when analog sensor data is received",
            "itemtype": "event",
            "name": "sensor",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetInterfaceKit object that\n       emitted the event.",
                    "type": "PhidgetInterfaceKit"
                },
                {
                    "name": "data",
                    "description": "An object containing the sensor data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The sensor's index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The sensor's received value",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1190,
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1191,
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1192,
            "class": "PhidgetInterfaceKit",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1210,
            "description": "[read-only] An object containing information about all LED outputs of the device.\nHere are a few examples of how to retrieve information in that object:\n\n    PhidgetLED.leds[5].value     // LED 5 current value\n    PhidgetLED.leds.count        // Total number of LED outputs on the device",
            "itemtype": "property",
            "name": "leds",
            "type": "Object",
            "class": "PhidgetLED",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The total number of physical LED outputs on the device.",
                    "type": "Int"
                },
                {
                    "name": "leds[int].value",
                    "description": "The current brightness value of the specified LED\n          output (between 0 and 100)",
                    "type": "Int"
                },
                {
                    "name": "leds[int].currentLimit",
                    "description": "The current limit of the specified LED output\n          (in mA).",
                    "type": "Int"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 1226,
            "description": "The global voltage for all led outputs. When setting the voltage, you must use one of\nthe values in the `PhidgetLED.supportedVoltages` array. Valid values currently are\n(in volts):\n\n* 1.7\n* 2.75\n* 3.9\n* 5\n\nTrying to set the voltage to another value will fail silently. This is not supported\nby all PhidgetLED boards.",
            "itemtype": "property",
            "name": "voltage",
            "type": "Number",
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1257,
            "description": "The global \"current limit\" for all led outputs. When setting the global current\nlimit, you must use one of the values in the\n`PhidgetLED.supportedGlobalCurrentLimits` array. Valid values currently are (in mA):\n20, 40, 60, 80. Trying to set the current limit to another value will fail silently.\n\nThis is not supported by all PhidgetLED boards.",
            "itemtype": "property",
            "name": "currentLimit",
            "type": "Number",
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1283,
            "description": "[read-only] Array of supported voltages (in volts).",
            "itemtype": "property",
            "name": "supportedVoltages",
            "type": "Array",
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1293,
            "description": "[read-only] An array of values that are valid when setting the global current limit\n(in mA).",
            "itemtype": "property",
            "name": "supportedGlobalCurrentLimits",
            "type": "Array",
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1311,
            "description": "Adjusts the brightness of a LED.",
            "itemtype": "method",
            "name": "setBrightness",
            "params": [
                {
                    "name": "index",
                    "description": "The LED output number for which to adjust the brightness (or\n       array of LED output numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The value (0-100) you wish to adjust the brightness to.",
                    "type": "Int",
                    "optional": true,
                    "optdefault": "100"
                }
            ],
            "return": {
                "description": "Returns the Phidget to allow method chaining",
                "type": "Phidget"
            },
            "chainable": 1,
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1333,
            "description": "Event emitted right after a LED's brightness has been changed.",
            "itemtype": "event",
            "name": "brightness",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetInterfaceKit object that\n       emitted the event.",
                    "type": "PhidgetInterfaceKit"
                },
                {
                    "name": "data",
                    "description": "An object containing the brightness data and related\n       information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The LED output index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The brightness value",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1355,
            "description": "Sets the current limit (in mA) for a specific LED output (or an array of LED outputs).\nThe value must be between 0 and 80 mA. If the value provided is outside this range, the\nclosest acceptable value will be used instead.",
            "itemtype": "method",
            "name": "setCurrentLimit",
            "params": [
                {
                    "name": "index",
                    "description": "The LED output number (or array of LED output numbers) for\n       which to adjust the current limit",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The value you wish to adjust the current limit to. Should be within\n       the range defined by `PhidgetLED.currentLimitRange`.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "20"
                }
            ],
            "return": {
                "description": "Returns the Phidget to allow method chaining",
                "type": "Phidget"
            },
            "chainable": 1,
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1410,
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1411,
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1412,
            "class": "PhidgetLED",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1445,
            "description": "[read-only] An object containing information about all the bridge's sensors. Here are\na few examples of how to retrieve information in that object:\n\n    PhidgetBridge.sensors[2].value         // Sensor 2 current value\n    PhidgetBridge.sensors.count            // Total number of sensors on the device\n    PhidgetBridge.sensors[3].gain          // Sensor 3 sensitivity level\n    PhidgetBridge.sensors[0].enabled       // Whether sensor 0 is currently enabled",
            "itemtype": "property",
            "name": "sensors",
            "type": "Object",
            "class": "PhidgetBridge",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The total number of sensors on the device.",
                    "type": "Int"
                },
                {
                    "name": "sensors[int].gain",
                    "description": "The gain for this sensor (1, 8, 16, 32, 64 or 128)",
                    "type": "Int"
                },
                {
                    "name": "sensors[int].updateInterval",
                    "description": "The update interval of the specified\n          sensor.",
                    "type": "Int"
                },
                {
                    "name": "sensors[int].value",
                    "description": "The current value of the specified sensor in\n                                       mV/V. If the sensor is not enabled, this will\n                                       be `null`.",
                    "type": "Number"
                },
                {
                    "name": "sensors[int].min",
                    "description": "The minimum value that the sensor can measure\n                                       in mV/V. This value will depend on the\n                                       selected gain. At a gain of 1, the maximum is\n                                       -1000mV/V.",
                    "type": "Number"
                },
                {
                    "name": "sensors[int].max",
                    "description": "The minimum value that the sensor can measure\n                                       in mV/V. This value will depend on the\n                                       selected gain. At a gain of 1, the maximum is\n                                       1000mV/V.",
                    "type": "Number"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 1473,
            "description": "The duration (in milliseconds) between update notifications (must be multiple of 8).\nThe shorter the interval is, the more frequent the updates will be sent by the\ndevice.",
            "itemtype": "property",
            "name": "updateInterval",
            "type": "Int",
            "default": "16",
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1497,
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1500,
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1514,
            "description": "Sets the gain of a specific sensor (or array of sensors). Valid values are 1, 8, 16,\n32, 64 or 128. The highest the gain, the better the resolution. For that reason, it’s\nbest to use the highest gain possible that can still measure the full range of your\nsensor.",
            "itemtype": "method",
            "name": "setGain",
            "params": [
                {
                    "name": "index",
                    "description": "The sensor's number (or an array of sensor numbers)",
                    "type": "Number|Array"
                },
                {
                    "name": "value",
                    "description": "The gain to assign (1, 8, 16, 32, 64 or 128)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "Returns the PhidgetBridge to allow method chaining.",
                "type": "PhidgetBridge"
            },
            "chainable": 1,
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1551,
            "description": "Enables or disables a sensor. Beware that this setting remains even when the bridge is\n powered off.",
            "itemtype": "method",
            "name": "setEnabled",
            "params": [
                {
                    "name": "index",
                    "description": "The sensor's number (or an array of sensor numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The status to set",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Returns the PhidgetBridge to allow method chaining.",
                "type": "PhidgetBridge"
            },
            "chainable": 1,
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1587,
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1594,
            "description": "Event emitted when sensor data is received.",
            "itemtype": "event",
            "name": "sensor",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetBridge object that emitted the\nevent.",
                    "type": "PhidgetBridge"
                },
                {
                    "name": "data",
                    "description": "An object containing the sensor data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The sensor's index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The sensor's received value",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1651,
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1652,
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1653,
            "class": "PhidgetBridge",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1711,
            "description": "The duration (in milliseconds) between update notifications (must be multiple of 8).\nThe shorter the interval is, the more frequent the updates will be sent by the\ndevice.",
            "itemtype": "property",
            "name": "updateInterval",
            "type": "Int",
            "default": "16",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1735,
            "description": "[Read-only] The minimum acceleration value that can be set on outputs",
            "itemtype": "property",
            "name": "minimumAcceleration",
            "type": "Number",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1746,
            "description": "[Read-only] The maximum acceleration value that can be set on outputs",
            "itemtype": "property",
            "name": "maximumAcceleration",
            "type": "Number",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1757,
            "description": "[Read-only] The minimum position that an output can travel to.",
            "itemtype": "property",
            "name": "minimumPosition",
            "type": "Number",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1768,
            "description": "[Read-only] The maximum position that an output can travel to.",
            "itemtype": "property",
            "name": "maximumPosition",
            "type": "Number",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1779,
            "description": "[Read-only] The minimum velocity that an output can be set to.",
            "itemtype": "property",
            "name": "minimumVelocity",
            "type": "Number",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1790,
            "description": "[Read-only] The maximum velocity that an output can be set to.",
            "itemtype": "property",
            "name": "maximumVelocity",
            "type": "Number",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1801,
            "description": "[Read-only] The minimum current that an output can be set to. Current limits are not\nsupported by all stepper controllers.",
            "itemtype": "property",
            "name": "minimumCurrent",
            "type": "Number",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1814,
            "description": "[Read-only] The maximum current that an output can be set to. Current limits are not\nsupported by all stepper controllers.",
            "itemtype": "property",
            "name": "maximumCurrent",
            "type": "Number",
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1827,
            "description": "[read-only] An object containing information about the motor outputs of the device.\nHere are a few examples of how to retrieve information in that object:\n\n    PhidgetStepper.outputs[5].currentPosition  // Motor 5's current position\n    PhidgetStepper.outputs[5].stopped          // Is motor 5 stopped?\n    PhidgetStepper.outputs.count               // Total number of outputs on the device",
            "itemtype": "property",
            "name": "outputs",
            "type": "Object",
            "class": "PhidgetStepper",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The total number of outputs on the device.",
                    "type": "Int"
                },
                {
                    "name": "outputs[int].position",
                    "description": "The position of the motor hooked up to that\noutput. This value remains between sessions. It is used when calculating the movement\nneeded to reach the target position. It can be manually set with `setPosition()`.",
                    "type": "Number"
                },
                {
                    "name": "outputs[int].targetPosition",
                    "description": "The last set target position.",
                    "type": "Number"
                },
                {
                    "name": "outputs[int].acceleration",
                    "description": "The last set acceleration value (also\nused as deceleration value). This property should be set as part of initialization\nbecause otherwise, it will remain unknown.",
                    "type": "Number"
                },
                {
                    "name": "outputs[int].currentLimit",
                    "description": "The last set current limit. Current\nlimit is not supported by all stepper controllers.",
                    "type": "Number"
                },
                {
                    "name": "outputs[int].current",
                    "description": "The actual current draw for the motor\nconnected to that output. Current sense is not supported by all stepper controllers.",
                    "type": "Number"
                },
                {
                    "name": "outputs[int].targetVelocity",
                    "description": "The desired velocity (speed) for the\nmotor on that output. Sometimes referred to as the \"velocity limit\".",
                    "type": "Number"
                },
                {
                    "name": "outputs[int].velocity",
                    "description": "The actual current velocity for the motor\non that output.",
                    "type": "Number"
                },
                {
                    "name": "outputs[int].engaged",
                    "description": "The engaged state. This is whether or not\nthe motor connected to the output is currently powered.",
                    "type": "Boolean"
                },
                {
                    "name": "outputs[int].stopped",
                    "description": "Whether the motor connected to that output\nis currently stopped. If this is true, it indicates that the motor is not moving, and\nthere are no outstanding commands.",
                    "type": "Boolean"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 1871,
            "description": "[read-only] An object containing information about the digital inputs of the\nPhidgetStepper board. If `PhidgetStepper.inputs.count` equals 0, it simply means that\nyour board does not have any digital inputs.\n\n    PhidgetStepper.inputs[0].value  // Digital input 0's boolean value\n    PhidgetStepper.outputs.count    // Number of digital inputs on the device",
            "itemtype": "property",
            "name": "inputs",
            "type": "Object",
            "class": "PhidgetStepper",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The total number of digital inputs on the device.",
                    "type": "Int"
                },
                {
                    "name": "outputs[int].value",
                    "description": "The current boolean value of the input.",
                    "type": "Boolean"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 1887,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1890,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1893,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1896,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1899,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1902,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1905,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1908,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1911,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1918,
            "description": "Starts or stops power from being sent to the motor connected to a specific output (or\narray of outputs). By default, outputs do not power connected motors. Before moving\nthe motor, you must therefore engage the motor first.\n\nTo reduce the motor's power consumption, you can disengage it once it's reached its\ntarget position. If you are concerned about keeping accurate track of position, the\nmotor should not be disengaged until the motor is stopped.",
            "itemtype": "method",
            "name": "engageMotor",
            "params": [
                {
                    "name": "index",
                    "description": "The motor's index number (or an array of motor numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The boolean status to use.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns the PhidgetStepper object to allow method chaining.",
                "type": "PhidgetStepper"
            },
            "chainable": 1,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1957,
            "description": "Sets the acceleration for the motor connected to the specified output. The motor will\nboth accelerate and decelarate at this rate. For the 1062 board, this is specified in\nhalf-steps.\n\nThe minimum and maximum acceleration values can be viewed in the `minimumAcceleration`\nand `maximumAcceleration` properties.\n\nThe acceleration should be explicitely set as part of initialization because otherwise\nit will remain unknown.",
            "itemtype": "method",
            "name": "setAcceleration",
            "params": [
                {
                    "name": "index",
                    "description": "The output's index number (or an array of output numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The desired acceleration specified in half-steps. If not\nspecified (or invalid), the maximum acceleration will be used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the PhidgetStepper to allow method chaining.",
                "type": "PhidgetStepper"
            },
            "chainable": 1,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 1999,
            "description": "Sets the target speed (velocity) for the motor connected to the specified output (or\narray of outputs). If the `targetVelocity` is set to 0, the motor will not move.\n\nNote that this is not necessarily the speed that the motor is being turned at. The\nmotor is accelerated towards the target velocity and then decelerated as it approaches\nthe target position. If the target position is close enough, it may never reach the\ntarget velocity.",
            "itemtype": "method",
            "name": "setTargetVelocity",
            "params": [
                {
                    "name": "index",
                    "description": "The output's index number (or an array of output numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The desired velocity specified in half-steps. If not specified\n(or invalid), the maximum velocity will be used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the PhidgetStepper to allow method chaining.",
                "type": "PhidgetStepper"
            },
            "chainable": 1,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2039,
            "description": "Sets the current position of the motor connected to the specified output (or array of\noutputs). Setting the position does not actually move the motor, it merely sets the\nreference that will be used when moving to a target position.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "index",
                    "description": "The output's index number (or an array of output numbers).",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The desired velocity specified in half-steps. If not specified\n(or invalid), the maximum velocity will be used.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the PhidgetStepper to allow method chaining.",
                "type": "PhidgetStepper"
            },
            "chainable": 1,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2081,
            "description": "Sets a new target position for the motor connected to the specified output. The motor\nwill immediately start moving towards this position.\n\nNote that calling `setTargetPosition()` will override a previous call to\n`setTargetPosition()` and the motor will begin tracking to the new position\nimmediately. The velocity of the motor will be ramped appropriately.",
            "itemtype": "method",
            "name": "setTargetPosition",
            "params": [
                {
                    "name": "index",
                    "description": "The output's index number (or an array of output numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The target position specified in half-steps.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                }
            ],
            "return": {
                "description": "Returns the PhidgetStepper to allow method chaining.",
                "type": "PhidgetStepper"
            },
            "chainable": 1,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2117,
            "description": "Sets the upper current limit for the motor connected to the specified output. Note that\nnot all stepper controllers support current limiting.",
            "itemtype": "method",
            "name": "setCurrentLimit",
            "params": [
                {
                    "name": "index",
                    "description": "The output's index number (or an array of output numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The target position specified in half-steps.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the PhidgetStepper to allow method chaining.",
                "type": "PhidgetStepper"
            },
            "chainable": 1,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2150,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2180,
            "description": "Event emitted when digital input data is received.",
            "itemtype": "event",
            "name": "input",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetStepper object that emitted the\nevent.",
                    "type": "PhidgetStepper"
                },
                {
                    "name": "data",
                    "description": "An object containing the input data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The input's index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The input's received value",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2214,
            "description": "Event emitted to report that the position of a motor connected to one of the\nboard's outputs has changed.",
            "itemtype": "event",
            "name": "position",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetStepper object that emitted the\nevent.",
                    "type": "PhidgetStepper"
                },
                {
                    "name": "data",
                    "description": "An object containing information about the event.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The output's index number.",
                            "type": "Int"
                        },
                        {
                            "name": "index",
                            "description": "The motor's new position.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2283,
            "description": "Event emitted when a motor connected to one of the board's outputs has reached\nits target position.",
            "itemtype": "event",
            "name": "target",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetStepper object that emitted the\nevent.",
                    "type": "PhidgetStepper"
                },
                {
                    "name": "data",
                    "description": "An object containing information about the event.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The output's index number.",
                            "type": "Int"
                        },
                        {
                            "name": "position",
                            "description": "The motor's position",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2305,
            "description": "Event emitted when a motor connected to one of the board's outputs starts moving.",
            "itemtype": "event",
            "name": "start",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetStepper object that emitted the\nevent.",
                    "type": "PhidgetStepper"
                },
                {
                    "name": "data",
                    "description": "An object containing information about the event.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The output's index number.",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2314,
            "description": "Event emitted when a motor connected to one of the board's outputs stops moving.",
            "itemtype": "event",
            "name": "stop",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetStepper object that emitted the\nevent.",
                    "type": "PhidgetStepper"
                },
                {
                    "name": "data",
                    "description": "An object containing information about the event.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The output's index number.",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2346,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2347,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2348,
            "class": "PhidgetStepper",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2387,
            "description": "[read-only] Array of all protocols supported by the device.",
            "itemtype": "property",
            "name": "SUPPORTED_PROTOCOLS",
            "type": "Array",
            "static": 1,
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2403,
            "description": "[read-only] An object containing information about the digital outputs of the device.\nOutput 0 is also labeled on the board as \"+5V\". Output 1 is also labeled on the board\nas \"LED\". This is not to be confused with the onboard LED. To control the onboard\nLED, please use the `PhidgetRFID.led` property.\n\nHere is how to retrieve an output's value or the total number of outputs:\n\n    PhidgetRFID.outputs[1].value     // Output 1 current value\n    PhidgetRFID.outputs.count        // Total number of outputs on the device",
            "itemtype": "property",
            "name": "outputs",
            "type": "Object",
            "class": "PhidgetRFID",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The total number of outputs on the device.",
                    "type": "Int"
                },
                {
                    "name": "outputs[int].value",
                    "description": "The current value of the specified output.",
                    "type": "Int"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 2420,
            "description": "[read-only] Status of the reader. The two possible statuses are:\n\n  - waiting: no tag is being detected because none are present or because the antenna is off\n  - detecting: a tag is currently being detected",
            "itemtype": "property",
            "name": "status",
            "type": "String",
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2430,
            "description": "[read-only] An object containing information about the last tag that was read.",
            "itemtype": "property",
            "name": "tag",
            "type": "Object",
            "class": "PhidgetRFID",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "value",
                    "description": "The tag's value.",
                    "type": "Int"
                },
                {
                    "name": "protocol",
                    "description": "The tag's protocol.",
                    "type": "Int"
                },
                {
                    "name": "detectedAt",
                    "description": "A `Date` object representing the moment when the tag was read.",
                    "type": "Date"
                },
                {
                    "name": "lostAt",
                    "description": "A `Date` object representing the moment when the previously read\ntag was lost.",
                    "type": "Date"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 2447,
            "description": "The status of the onboard LED (not to be confused with the LED output). Setting this\nproperty to `true` will turn on the onboard LED while setting it to `false` will turn it\noff.",
            "itemtype": "property",
            "name": "led",
            "type": "Boolean",
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2465,
            "description": "The activity status of the RFID antenna. The antenna must be activated in order for\nthe device to work properly. Setting this property to `true` activates the antenna\nwhile setting it to `false` deactivates it.",
            "itemtype": "property",
            "name": "antenna",
            "type": "Boolean",
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2514,
            "description": "Event emitted when a tag has been detected.",
            "itemtype": "event",
            "name": "detected",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetRFID object that emitted the event.",
                    "type": "PhidgetRFID"
                },
                {
                    "name": "tag",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "protocol",
                            "description": "The tag's protocol. Supported protocols are: `ISO11785 FDX-B`,\n`EM4100` and `PhidgetTag`.",
                            "type": "Number"
                        },
                        {
                            "name": "value",
                            "description": "The tag's value.",
                            "type": "String"
                        },
                        {
                            "name": "detectedAt",
                            "description": "The date and time when the tag was detected.",
                            "type": "Date"
                        },
                        {
                            "name": "lostAt",
                            "description": "The date and time when the tag was lost.",
                            "type": "Date"
                        }
                    ]
                }
            ],
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2535,
            "description": "Event emitted when a previously detected tag is now lost",
            "itemtype": "event",
            "name": "lost",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetRFID object that emitted the event.",
                    "type": "PhidgetRFID"
                },
                {
                    "name": "tag",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "protocol",
                            "description": "The tag's protocol. Supported protocols are: `ISO11785 FDX-B`,\n`EM4100` and `PhidgetTag`.",
                            "type": "Number"
                        },
                        {
                            "name": "value",
                            "description": "The tag's value.",
                            "type": "String"
                        },
                        {
                            "name": "detectedAt",
                            "description": "The date and time when the tag was detected.",
                            "type": "Date"
                        },
                        {
                            "name": "lostAt",
                            "description": "The date and time when the tag was lost.",
                            "type": "Date"
                        }
                    ]
                }
            ],
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2553,
            "description": "Event emitted when the device's status changes.",
            "itemtype": "event",
            "name": "status",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetRFID object that emitted the event.",
                    "type": "PhidgetRFID"
                },
                {
                    "name": "status",
                    "description": "Status of the device (`detecting` or `waiting`).",
                    "type": "String"
                }
            ],
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2570,
            "description": "Event emitted when the antenna's status changes.",
            "itemtype": "event",
            "name": "antenna",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetRFID object that emitted the event.",
                    "type": "PhidgetRFID"
                },
                {
                    "name": "status",
                    "description": "Status of the antenna. `true` means it is now \"on\" and `false` means\nit is now \"off\".",
                    "type": "Boolean"
                }
            ],
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2588,
            "description": "Event emitted when the onboard LED's status changes.",
            "itemtype": "event",
            "name": "led",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetRFID object that emitted the event.",
                    "type": "PhidgetRFID"
                },
                {
                    "name": "status",
                    "description": "Status of the LED. `true` means it is now \"on\" and `false` means it is\nnow \"off\".",
                    "type": "Boolean"
                }
            ],
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2607,
            "description": "Event emitted when an output's status has changed.",
            "itemtype": "event",
            "name": "output",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetRFID object that emitted the event.",
                    "type": "PhidgetRFID"
                },
                {
                    "name": "data",
                    "description": "An object containing the output data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The output's index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The output's new value",
                            "type": "Int"
                        }
                    ]
                }
            ],
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2626,
            "description": "Sets the specified output to active (`true`) or inactive (`false`). This method should only\nbe used after the board is 'opened'. Calling it before will fail silently.",
            "itemtype": "method",
            "name": "setOutput",
            "params": [
                {
                    "name": "index",
                    "description": "The output number to set (or array of output numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The value you wish to set the output to.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns the `PhidgetRFID` object to allow method chaining.",
                "type": "PhidgetRFID"
            },
            "chainable": 1,
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2656,
            "description": "Writes a tag. Please note that not all devices have write capacity. This method will be silently",
            "itemtype": "method",
            "name": "write",
            "params": [
                {
                    "name": "tag",
                    "description": "The value that should be written to the card.",
                    "type": "String"
                },
                {
                    "name": "protocol",
                    "description": "An integer identifying the protocol to be used. 1 is EM4100, 2 is\nISO11785 FDX-B and 3 is PhidgetTag. Default is EM4100.",
                    "type": "Number=1"
                },
                {
                    "name": "lock",
                    "description": "Whether the card should be prevented from being written again.\nDefault is false.",
                    "type": "Boolean=false"
                }
            ],
            "return": {
                "description": "Returns the `PhidgetRFID` object to allow method chaining.",
                "type": "PhidgetRFID"
            },
            "chainable": 1,
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2692,
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2693,
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2694,
            "class": "PhidgetRFID",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2747,
            "description": "[read-only] The last known ambient temperature of the sensor (where the inputs connect to the\nboard), in degrees celsius.",
            "itemtype": "property",
            "name": "ambientTemperature",
            "type": "Number",
            "instance": "",
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2761,
            "description": "[read-only] The highest possible ambient temperature value which can be returned by the sensor,\nin degrees celsius.",
            "itemtype": "property",
            "name": "ambientTemperatureMax",
            "type": "Number",
            "instance": "",
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2775,
            "description": "[read-only] The lowest possible ambient temperature value which can be returned by the sensor,\nin degrees celsius.",
            "itemtype": "property",
            "name": "ambientTemperatureMin",
            "type": "Number",
            "instance": "",
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2789,
            "description": "[read-only] An object containing data about each input on the device.",
            "itemtype": "property",
            "name": "inputs",
            "type": "Object",
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "count",
                    "description": "The number of inputs available on the device.",
                    "type": "Int"
                },
                {
                    "name": "inputs[int].temperature",
                    "description": "The input's last known temperature in degrees\ncelsius.",
                    "type": "Number"
                },
                {
                    "name": "inputs[int].temperatureMax",
                    "description": "The highest temperature possible for the given\ninput, based on thermocouple type.",
                    "type": "Number"
                },
                {
                    "name": "inputs[int].temperatureMin",
                    "description": "The lowest temperature possible for the given\ninput, based on thermocouple type.",
                    "type": "Number"
                },
                {
                    "name": "inputs[int].trigger",
                    "description": "The input's temperature change trigger, in\ndegrees celsius.",
                    "type": "Number"
                },
                {
                    "name": "inputs[int].potential",
                    "description": "The input's last known voltage.",
                    "type": "Number"
                },
                {
                    "name": "inputs[int].potentialMax",
                    "description": "The highest voltage possible for the given input,\nbased on thermocouple type.",
                    "type": "Number"
                },
                {
                    "name": "inputs[int].potentialMin",
                    "description": "The lowest voltage possible for the given input,\nbased on thermocouple type.",
                    "type": "Number"
                },
                {
                    "name": "inputs[int].thermocoupleType",
                    "description": "The type of thermocouple attached to the given\ninput. Value corresponds to a value from PhidgetTemperatureSensor.THERMOCOUPLE_TYPES.",
                    "type": "Int"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 2821,
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2824,
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2827,
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2835,
            "description": "[read-only] An enum of supported thermocouple types. Support for other thermocouple types, and\nvoltage sources other than thermocouples in the valid range (between potentialMin and\npotentialMax) can be achieved using potential.",
            "itemtype": "property",
            "name": "THERMOCOUPLE_TYPES",
            "type": "Object",
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets",
            "subprops": [
                {
                    "name": "TYPE_K",
                    "description": "Integer value represent a K-type thermocouple.",
                    "type": "Int"
                },
                {
                    "name": "TYPE_J",
                    "description": "Integer value represent a J-type thermocouple.",
                    "type": "Int"
                },
                {
                    "name": "TYPE_E",
                    "description": "Integer value represent a E-type thermocouple.",
                    "type": "Int"
                },
                {
                    "name": "TYPE_T",
                    "description": "Integer value represent a T-type thermocouple.",
                    "type": "Int"
                }
            ]
        },
        {
            "file": "lib/phidgets.js",
            "line": 2857,
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2868,
            "description": "Sets the change trigger for an input. This is the amount by which the sensed temperature must\nchange between temperature change events. By default this is set to 0.5. Setting trigger\nto 0 will cause all temperature updates to fire events. This is helpful for applications that are\nimplementing their own filtering.",
            "itemtype": "method",
            "name": "setTemperatureChangeTrigger",
            "params": [
                {
                    "name": "index",
                    "description": "The input's number (or an array of input numbers)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The TemperatureChangeTigger value to set",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the PhidgetTemperatureSensor to allow method\nchaining.",
                "type": "PhidgetTemperatureSensor"
            },
            "chainable": 1,
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2905,
            "description": "Sets the thermocouple type for an input. The possible values are 'J', 'K', 'E', and 'T', or one\nof the values in the PhidgetTemperatureSensor.THERMOCOUPLE_TYPES enum. Support for other\nthermocouple types, and voltage sources other than thermocouples in the valid range (between\npotentialMin and potentialMax) can be achieved using potential.",
            "itemtype": "method",
            "name": "setThermocoupleType",
            "params": [
                {
                    "name": "index",
                    "description": "The input's index (or an array of input indices)",
                    "type": "Int|Array"
                },
                {
                    "name": "value",
                    "description": "The ThermocoupleType to set",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "Returns the PhidgetTemperatureSensor to allow method\nchaining.",
                "type": "PhidgetTemperatureSensor"
            },
            "chainable": 1,
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2950,
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2959,
            "description": "The sensor's ambient temperature has changed.",
            "itemtype": "event",
            "name": "ambientTemperature",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetTemperatureSensor object that\nemitted the event.",
                    "type": "PhidgetTemperatureSensor"
                },
                {
                    "name": "data",
                    "description": "An object containing the sensor data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "value",
                            "description": "The sensor's new ambient temperature.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2970,
            "description": "The calculated temperature of the given input has changed by more than\ntemperatureChangeTrigger. This value is dependent on the sensor's ambient temperature, the\ninput's thermocouple type, and the input's potential.",
            "itemtype": "event",
            "name": "temperature",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetTemperatureSensor object that\nemitted the event.",
                    "type": "PhidgetTemperatureSensor"
                },
                {
                    "name": "data",
                    "description": "An object containing the sensor data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The input's index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The input's new temperature.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        },
        {
            "file": "lib/phidgets.js",
            "line": 2986,
            "description": "The potential (voltage) of the given input has changed.",
            "itemtype": "event",
            "name": "potential",
            "params": [
                {
                    "name": "emitter",
                    "description": "The actual PhidgetTemperatureSensor object that\nemitted the event.",
                    "type": "PhidgetTemperatureSensor"
                },
                {
                    "name": "data",
                    "description": "An object containing the sensor data and related information",
                    "type": "Object",
                    "props": [
                        {
                            "name": "index",
                            "description": "The input's index number",
                            "type": "Int"
                        },
                        {
                            "name": "value",
                            "description": "The input's new potential.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "class": "PhidgetTemperatureSensor",
            "module": "phidgets"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:333"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:396"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:971"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1019"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1056"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1311"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1355"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1514"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1551"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1918"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1957"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:1999"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:2039"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:2081"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:2117"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:2626"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:2656"
        },
        {
            "message": "unknown tag: instance",
            "line": " lib/phidgets.js:2747"
        },
        {
            "message": "unknown tag: instance",
            "line": " lib/phidgets.js:2761"
        },
        {
            "message": "unknown tag: instance",
            "line": " lib/phidgets.js:2775"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:2868"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/phidgets.js:2905"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:8"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:9"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:10"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:426"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:445"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:488"
        },
        {
            "message": "Missing item type\nParses a /PSK string and performs appropriate action.",
            "line": " lib/phidgets.js:685"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:865"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:866"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:867"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:961"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1102"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1190"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1191"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1192"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1410"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1411"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1412"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1497"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1500"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1587"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1651"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1652"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1653"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1887"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1890"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1893"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1896"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1899"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1902"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1905"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1908"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:1911"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2150"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2346"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2347"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2348"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2692"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2693"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2694"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2821"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2824"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2827"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2857"
        },
        {
            "message": "Missing item type",
            "line": " lib/phidgets.js:2950"
        }
    ]
}